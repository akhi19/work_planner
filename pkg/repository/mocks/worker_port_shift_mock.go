// Code generated by MockGen. DO NOT EDIT.
// Source: ../work_planner/pkg/repository/internal/ports/worker_shift_port.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	context "context"
	reflect "reflect"

	domain "github.com/akhi19/work_planner/pkg/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockIWorkerShift is a mock of IWorkerShift interface.
type MockIWorkerShift struct {
	ctrl     *gomock.Controller
	recorder *MockIWorkerShiftMockRecorder
}

// MockIWorkerShiftMockRecorder is the mock recorder for MockIWorkerShift.
type MockIWorkerShiftMockRecorder struct {
	mock *MockIWorkerShift
}

// NewMockIWorkerShift creates a new mock instance.
func NewMockIWorkerShift(ctrl *gomock.Controller) *MockIWorkerShift {
	mock := &MockIWorkerShift{ctrl: ctrl}
	mock.recorder = &MockIWorkerShiftMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWorkerShift) EXPECT() *MockIWorkerShiftMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIWorkerShift) Delete(ctx context.Context, id domain.SqlID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIWorkerShiftMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIWorkerShift)(nil).Delete), ctx, id)
}

// DeleteUsingShiftID mocks base method.
func (m *MockIWorkerShift) DeleteUsingShiftID(ctx context.Context, shiftID domain.SqlID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUsingShiftID", ctx, shiftID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUsingShiftID indicates an expected call of DeleteUsingShiftID.
func (mr *MockIWorkerShiftMockRecorder) DeleteUsingShiftID(ctx, shiftID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsingShiftID", reflect.TypeOf((*MockIWorkerShift)(nil).DeleteUsingShiftID), ctx, shiftID)
}

// DeleteUsingWorkerID mocks base method.
func (m *MockIWorkerShift) DeleteUsingWorkerID(ctx context.Context, workerID domain.SqlID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUsingWorkerID", ctx, workerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUsingWorkerID indicates an expected call of DeleteUsingWorkerID.
func (mr *MockIWorkerShiftMockRecorder) DeleteUsingWorkerID(ctx, workerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsingWorkerID", reflect.TypeOf((*MockIWorkerShift)(nil).DeleteUsingWorkerID), ctx, workerID)
}

// GetFreeWorkers mocks base method.
func (m *MockIWorkerShift) GetFreeWorkers(ctx context.Context, date int64) ([]domain.WorkerDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFreeWorkers", ctx, date)
	ret0, _ := ret[0].([]domain.WorkerDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFreeWorkers indicates an expected call of GetFreeWorkers.
func (mr *MockIWorkerShiftMockRecorder) GetFreeWorkers(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreeWorkers", reflect.TypeOf((*MockIWorkerShift)(nil).GetFreeWorkers), ctx, date)
}

// GetWorkerFromShift mocks base method.
func (m *MockIWorkerShift) GetWorkerFromShift(ctx context.Context, workerID domain.SqlID, date int64) (*domain.SqlID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkerFromShift", ctx, workerID, date)
	ret0, _ := ret[0].(*domain.SqlID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerFromShift indicates an expected call of GetWorkerFromShift.
func (mr *MockIWorkerShiftMockRecorder) GetWorkerFromShift(ctx, workerID, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerFromShift", reflect.TypeOf((*MockIWorkerShift)(nil).GetWorkerFromShift), ctx, workerID, date)
}

// GetWorkersOccupied mocks base method.
func (m *MockIWorkerShift) GetWorkersOccupied(ctx context.Context, date int64) ([]domain.WorkerOccupiedDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkersOccupied", ctx, date)
	ret0, _ := ret[0].([]domain.WorkerOccupiedDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkersOccupied indicates an expected call of GetWorkersOccupied.
func (mr *MockIWorkerShiftMockRecorder) GetWorkersOccupied(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkersOccupied", reflect.TypeOf((*MockIWorkerShift)(nil).GetWorkersOccupied), ctx, date)
}

// Insert mocks base method.
func (m *MockIWorkerShift) Insert(ctx context.Context, workerShiftDTO domain.WorkerShiftDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, workerShiftDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIWorkerShiftMockRecorder) Insert(ctx, workerShiftDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIWorkerShift)(nil).Insert), ctx, workerShiftDTO)
}

// Update mocks base method.
func (m *MockIWorkerShift) Update(ctx context.Context, id domain.SqlID, updateWorkerShiftDTO domain.UpdateWorkerShiftDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, updateWorkerShiftDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIWorkerShiftMockRecorder) Update(ctx, id, updateWorkerShiftDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIWorkerShift)(nil).Update), ctx, id, updateWorkerShiftDTO)
}
