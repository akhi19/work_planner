// Code generated by MockGen. DO NOT EDIT.
// Source: ../work_planner/pkg/repository/internal/ports/worker_port.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	context "context"
	reflect "reflect"

	domain "github.com/akhi19/work_planner/pkg/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockIWorker is a mock of IWorker interface.
type MockIWorker struct {
	ctrl     *gomock.Controller
	recorder *MockIWorkerMockRecorder
}

// MockIWorkerMockRecorder is the mock recorder for MockIWorker.
type MockIWorkerMockRecorder struct {
	mock *MockIWorker
}

// NewMockIWorker creates a new mock instance.
func NewMockIWorker(ctrl *gomock.Controller) *MockIWorker {
	mock := &MockIWorker{ctrl: ctrl}
	mock.recorder = &MockIWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWorker) EXPECT() *MockIWorkerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIWorker) Delete(ctx context.Context, id domain.SqlID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIWorkerMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIWorker)(nil).Delete), ctx, id)
}

// GetWorkerByID mocks base method.
func (m *MockIWorker) GetWorkerByID(ctx context.Context, workerID domain.SqlID) (*domain.WorkerDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkerByID", ctx, workerID)
	ret0, _ := ret[0].(*domain.WorkerDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerByID indicates an expected call of GetWorkerByID.
func (mr *MockIWorkerMockRecorder) GetWorkerByID(ctx, workerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerByID", reflect.TypeOf((*MockIWorker)(nil).GetWorkerByID), ctx, workerID)
}

// GetWorkers mocks base method.
func (m *MockIWorker) GetWorkers(ctx context.Context) ([]domain.WorkerDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkers", ctx)
	ret0, _ := ret[0].([]domain.WorkerDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkers indicates an expected call of GetWorkers.
func (mr *MockIWorkerMockRecorder) GetWorkers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkers", reflect.TypeOf((*MockIWorker)(nil).GetWorkers), ctx)
}

// Insert mocks base method.
func (m *MockIWorker) Insert(ctx context.Context, workerDTO domain.WorkerDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, workerDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIWorkerMockRecorder) Insert(ctx, workerDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIWorker)(nil).Insert), ctx, workerDTO)
}

// Update mocks base method.
func (m *MockIWorker) Update(ctx context.Context, id domain.SqlID, updateWorkerDTO domain.UpdateWorkerDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, updateWorkerDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIWorkerMockRecorder) Update(ctx, id, updateWorkerDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIWorker)(nil).Update), ctx, id, updateWorkerDTO)
}
